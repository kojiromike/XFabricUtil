@namespace("com.x.loyalty.v1")
 
protocol LoyaltyMarketing {
	import idl "Error.avdl";
	import idl "EmbeddedObject.avdl";
	import idl "Campaign.avdl";
	import idl "Query.avdl";
	import idl "Contact.avdl";
	import idl "Report.avdl";

	record Points {
		string type; //i.e. "X_Airline_FrequentFlyerMiles" or "BankOfX_Reward"
		long value;
	}
	
	record Balance {
		string type; //i.e. "X_Airline_FrequentFlyerMiles" or "BankOfX_Reward"
		long available;
		long pending_earn;
		long pending_spend;
		long spent;
	}
	
	record Customer {
		union{null,string} id;
		com.x.ocl.Contact primaryContact;
		Balance balance;
	}
	
	record LoyaltyCustomerError {
		Customer customer;
		array<com.x.ocl.Error> errors;
	}

	record LoyaltyCustomerIdError {
		string customerId;
		array<com.x.ocl.Error> errors;
	}

	enum RuleType {
		EARNING,
		SPENDING
	}
	
	record Rules {
		string id;
		union{RuleType,string} type;
		union{null,string} description = null;
		
		string balanceType; //A value equivalent to Balance.type
	}
	
	enum LoyaltyReportType {
		LOYALTY_CAMPAIGN_PERFORMANCE
	}

	@extends("com.x.ocl.Campaign")
	record LoyaltyCampaign {
		array<Rules> earningRules;
		array<Rules> spendingRules;
	}
	
	enum EventType {
		ORDER_PLACED,
		REFERRAL,
		SOCIAL_NETWORK
	}

	record Event {
		union{EventType,string} type;

		/** Date Time Format: ISO 8601 */
		string time;

		union{null,com.x.ocl.EmbeddedObject} eventSpecificData;
	}
	
	record EventError {
		Event event;
		array<com.x.ocl.Error> errors;
	}
	
	/**
	 * A reward is generated by the Loyalty Provider whenever the customer has
	 * generated the appropriate events that satisfy the earning rules 
	 * of any active campaign.
	 */
	record Reward {
		union{null,string} id = null; //Empty if not yet created
		string customerId;
		array<Event> events;
		
		Points earnedPoints;
		
		/** Date Time Format: ISO 8601 */
		string createdTime;
		string lastUpdatedTime;
		
		union{null,string} channelId; //Where this reward originated from
	}
	
	record RewardError {
		Reward reward;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/loyalty/campaign/search")
	@version("0.0.2")
	record SearchCampaign {
		com.x.ocl.Query query;
	}
	
	@topic("/loyalty/campaign/searchSucceeded")
	@version("0.0.2")
	record SearchCampaignSucceeded {
		com.x.ocl.Query query;
		array<com.x.ocl.Campaign> campaigns;
	}
	
	@topic("/loyalty/campaign/searchFailed")
	@version("0.0.2")
	record SearchCampaignFailed {
		com.x.ocl.Query query;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/loyalty/customer/create")
	@version("0.0.4")
	record CreateCustomer {
		array<Customer> customers;
	}
	
	@topic("/loyalty/customer/created")
	@version("0.0.4")
	record CustomerCreated {
		array<Customer> customers;
	}
	
	@topic("/loyalty/customer/createFailed")
	@version("0.0.4")
	record CreateCustomerFailed {
		array<LoyaltyCustomerError> errors;
	}
	
	@topic("/loyalty/customer/search")
	@version("0.0.4")
	record SearchCustomer {
		com.x.ocl.Query query;
	}
	
	@topic("/loyalty/customer/searchSucceeded")
	@version("0.0.4")
	record SearchCustomerSucceeded {
		com.x.ocl.Query query;
		array<Customer> customers;
	}
	
	@topic("/loyalty/customer/searchFailed")
	@version("0.0.2")
	record SearchCustomerFailed {
		com.x.ocl.Query query;
		array<com.x.ocl.Error> errors;
	}

	@topic("/loyalty/customer/update")
	@version("0.0.4")
	record UpdateCustomer {
		array<Customer> customers;
	}
	
	@topic("/loyalty/customer/updated")
	@version("0.0.4")
	record CustomerUpdated {
		array<Customer> customers;
	}
	
	@topic("/loyalty/customer/updateFailed")
	@version("0.0.4")
	record UpdateCustomerFailed {
		array<LoyaltyCustomerError> errors;
	}
	
	@topic("/loyalty/customer/delete")
	@version("0.0.1")
	record DeleteCustomer {
		array<string> customerIds;
	}
	
	@topic("/loyalty/customer/deleted")
	@version("0.0.1")
	record CustomerCreated {
		array<string> customerIds;
	}
	
	@topic("/loyalty/customer/deleteFailed")
	@version("0.0.1")
	record CreateCustomerFailed {
		array<LoyaltyCustomerIdError> errors;
	}
	
	@topic("/loyalty/event/create")
	@version("0.0.1")
	record CreateEvent {
		array<Event> events;
	}
	
	@topic("/loyalty/event/created")
	@version("0.0.1")
	record EventCreated {
		Event event;
		union{null,Reward} reward; //The reward that resulted from the event being created
	}
	
	@topic("/loyalty/event/reward/predict")
	@version("0.0.1")
	record PredictEventReward {
		array<Event> events;
	}
	
	@topic("/loyalty/event/reward/predicted")
	@version("0.0.1")
	record EventRewardPredicted {
		Event event;
		union{null,Reward} reward; //If no, it means this event does not result in any reward
	}
	
	@topic("/loyalty/event/reward/predictFailed")
	@version("0.0.1")
	record PredictEventRewardFailed {
		array<Event> events;
	}

	@topic("/loyalty/event/createFailed")
	@version("0.0.1")
	record CreateEventFailed {
		array<EventError> errors;
	}

	@topic("/loyalty/reward/create")
	@version("0.0.1")
	record CreateReward {
		array<Reward> rewards;
	}
	
	@topic("/loyalty/reward/created")
	@version("0.0.1")
	record RewardCreated {
		//This message is also published whenever an event causes a reward to be generated
		Reward reward;
	}
	
	@topic("/loyalty/reward/createFailed")
	@version("0.0.1")
	record CreateRewardFailed {
		array<RewardError> errors;
	}

	@topic("/loyalty/reward/search")
	@version("0.0.2")
	record SearchReward {
		com.x.ocl.Query query;
	}
	
	@topic("/loyalty/reward/searchSucceeded")
	@version("0.0.2")
	record SearchRewardSucceeded {
		com.x.ocl.Query query;
		array<Reward> rewards;
	}
	
	@topic("/loyalty/reward/searchFailed")
	@version("0.0.1")
	record SearchRewardFailed {
		array<com.x.ocl.Error> errors;
	}

	@topic("/loyalty/report/get") 
	@version("1.0.0") 
	record GetReport {
		LoyaltyReportType reportType;
		com.x.ocl.ReportDefinition reportDefinition;
	}

	@topic("/loyalty/report/getSucceeded") 
	@version("1.0.0") 
	record GetReportSucceeded {
		LoyaltyReportType reportType;
		com.x.ocl.Report report;
	}

	@topic("/loyalty/report/getFailed") 
	@version("1.0.0") 
	record GetReportFailed {
		LoyaltyReportType reportType;
		com.x.ocl.ReportDefinition reportDefinition;
		array<com.x.ocl.Error> errors;
	}
}
