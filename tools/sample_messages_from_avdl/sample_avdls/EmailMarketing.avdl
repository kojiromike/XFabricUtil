@namespace("com.x.emailmarketing.v0")

/**
 * The Email Marketing protocol defines the schema that all service provider
 * of email marketing functionality should support.
 *
 * Schema specific to a specific provider should be defined in its own protocol.
 * Extension points will be introduced in this common schema as appropriate.  
 * 
 */
protocol EmailMarketing {

	import idl "Error.avdl";
	import idl "Campaign.avdl";
	import idl "EmbeddedObject.avdl";
    import idl "Name.avdl";
	import idl "Email.avdl";

	/**
	 * An account represents the merchant's relationship with the
	 * Email Marketing provider. A merchant can have a hierarchy
	 * of accounts with a provider. Each account can have lists,
	 * contacts, campaigns, messages, etc... associated with it.
	 */
	record Account {
		union{null,string} id = null;
		
		/** The email address that will be use to send messages. */
		string email;
		string emailName;
		
		union{null,string} parentAccountId = null;
	}

	enum ContactStatus {
		UNCONFIRMED,
		ACTIVE,
		UNSUBSCRIBED
	}
	
	enum MessageFormatType {
		HTML,
		PLAIN_TEXT
	}
	
	
	/** A contact of the tenant  uniquely represented by an email */
	@extends("com.x.ocl.Email")
	record EmailContact {
		/** The account this list belongs to */
		string accountId;
		/** 
		 * Unique identifier as generated by Email Marketing provider. 
		 * Can be null when creating a new contact. 
		 */
		union{null,string} id = null;
		
		union{null, com.x.ocl.Name} name = null;
		
		union{ContactStatus,string} status;
		
		/** Any simple identifying information about the contact */
		union{null,map<string>} attributes = null;
		
		union{MessageFormatType,null} messageFormatPref = "HTML"; 
	}
	
	enum EventType {
		MESSAGE_BOUNCED,
		MESSAGE_OPENED,
		LINK_CLICKED,
		SOCIAL_NETWORK,
		UNSUBSCRIBE
	}
	
	/** Represents an event relating to a message sent from a campaign */
	record Event {
		string campaignId;
		string contactId;
		
		/** Date Time Format: ISO 8601 */
		string time;
		
		/** Provider specific types can be specified as strings */
		union{EventType,string} type;
		
		union{null,com.x.ocl.EmbeddedObject} extension = null;
	}
	
	@extends("Event")
	record SocialShare {
		string socialNetwork;		
		int networkViews;
	}
	
	@extends("Event")
	record LinkClick {		
		int webPageViews;
		union{null, string} orderId = null;
		union{null, double} salesValue = null;
	}
	
	/** 
	 * This object has a summary and detailed statistics of a contact 
	 * in the context of a campaign. 
	 */
	record ContactStatistic {
		string contactId;
		string campaignId;

		boolean bounced;
		int delivered;
		int opens;
		int clicks;
		boolean unsubscribed;

		array<union{Event,LinkClick,SocialShare}> allEvents;				
	}

	/** Use this to search for contact */
	record ContactSearchFilter {
		union{null,string} email = null;
		union{null,string} contactId = null;
		union{null,string} listId = null;
		union{null,string} campaignId = null;
		union{null,string} accountId = null;
	}
	
	/** 
	 * This is an abstract type that represents a list. Messages should NOT
	 * be constructed directly off this schema. 
	 */
	@abstract("true")
	record BaseList {
		string id;
		string name;
		string description;		
	}
	
	/**
	 * PRIVATE - Only visible to the merchant.
	 * CONTACT - The provider can inform a contact that he is part of the list.
	*/
	enum ListVisibilityType {
		PRIVATE,
		CONTACT
	}
	
	/** A static list of contacts. This type extends the BaseList type. */
	@extends("BaseList")
	record List {
		BaseList base;

		/** The account this list belongs to */
		string accountId;

		/** 
		 * Determines whether a contact should be notified whenever 
		 * it is added to this list. 
		 */
		boolean notifyOnAdd = false;
		union{null,string} notifyOnAddMessageId = null;
		
		union{ListVisibilityType,string} visibility;  
	}
	
	/**
	 * GLOBAL - all contacts the tenant has will be considered
	 * LIST - only contacts in the associated static list will be considered.
	 */
	enum SegmentScope {
		GLOBAL,
		LIST
	}
	
	/** A criterion defines how to match a contact */
	record Criterion {
		union{null,string} description = null;
		
		string property;
		string operator;
		union{null,array<string>} values = null;
	}
	
	/** 
	 * A segment is a dynamic list of contacts.
	 * A segment is defined by a set of query criteria and the
	 * scope it covers.
	 */
	@extends("BaseList")
	record Segment {
		BaseList base;
		
		array<Criterion> criteria;
		
		SegmentScope scope;
		union{null,array<string>} staticListId = null;		
	}

	/** Use this to search for list */	
	record ListSearchFilter {
		union{null,string} listId = null;
		union{null,string} contactId = null;
		union{null,string} campaignId = null;
		union{null,string} accountId = null;
	}
	
	/**
	 * NORMAL - A message normally sent from a campaign.
	 * WELCOME - A message that welcomes a contact when subscribed.
	 * CONFIRM - A message requesting recipient to confirm email address.
	 */
	enum MessageType {
		NORMAL,
		WELCOME,  
		CONFIRM 
	}
	
	/** Represents an email that will be used in campaign */
	record Message {
		string id;
		
		/** The account this list belongs to */
		string accountId;

		/** Provider specific types can be specified as strings */
		union{MessageType,string} type;
		
		string subjectText;
		
		/** Must provide both */
		string htmlBody;
		string textBody;
		
		union{null,string} defaultFromEmail = null;
		union{null,string} defaultFromName = null;
	}
	
	/** Use this to search for message */
	record MessageSearchFilter {
		union{null,string} messageId = null;
		union{null,string} campaignId = null;
		union{null,string} accountId = null;
	}
	
	record SpamCheckRule {
		double score;
		string name;
		union{null,string} description = null;
	}
	
	record SpamCheckScore {
		string messageId;
		
		/** Lower score is better */
		double totalScore;
		array<SpamCheckRule> triggeredRules;
	}
	
	/** The aggregated and detailed result of a campaign. */
	record CampaignStatistic {
		string campaignId;
		
		int bounces;
		int delivered;
		int opens;
		int clicks;
		int unsubscribes;
		
		array<union{Event,LinkClick,SocialShare}> allEvents;				
	}
	
	@extends("com.x.ocl.Campaign")
	record EmailCampaign {
		string messageId;

		/** If not provided, will use default on message */
		union{null,string} fromEmail = null;
		union{null,string} fromName = null;
		
		/** Must have one or more list. Can be id of static list or segment. */
		array<string> listIds;
		
		//TODO: define Address type
		string mailingAddress;
	}
	
	/** Use this to search for campaign */
	record CampaignSearchFilter {
		union{null,string} campaignId = null;
		union{null,string} campaignName = null;
		union{null,string} messageId = null;
		union{null,string} listId = null;
		union{null,string} accountId = null;
	}
	
	/** THE BELOW TYPES ARE USED AS MESSAGES */
	
	@topic("/emailMarketing/contact/create")
	@version("0.0.3")
	record CreateContact {
		array<com.x.ocl.Email> listOfContacts;
		
		/** Optionally subscribe these contacts to the list(s) if provided */
		array<string> listIds;
	}
	
	@topic("/emailMarketing/contact/created")
	@version("0.0.4")
	@event("true")
	record ContactCreated {
		array<com.x.ocl.Email> listOfContacts;
	}
	
	@topic("/emailMarketing/contact/createFailed")
	@version("0.0.3")
	record CreateContactFailed {
		array<com.x.ocl.Email> listOfContacts;		
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/contact/search")
	@version("0.0.1")
	record SearchContact {
		ContactSearchFilter filter;
	}
	
	@topic("/emailMarketing/contact/searchSucceeded")
	@version("0.0.3")
	record SearchContactSucceeded {
		ContactSearchFilter filter;
		array<com.x.ocl.Email> listOfContacts;
	}
	
	@topic("/emailMarketing/contact/searchFailed")
	@version("0.0.1")
	record SearchContactFailed {
		ContactSearchFilter filter;
	}
	
	@topic("/emailMarketing/contact/update")
	@version("0.0.3")
	record UpdateContact {
		array<com.x.ocl.Email> listOfContacts;
	}
	
	@topic("/emailMarketing/contact/updated")
	@version("0.0.4")
	@event("true")
	record ContactUpdated {
		array<com.x.ocl.Email> listOfContacts;
	}
	
	@topic("/emailMarketing/contact/updateFailed")
	@version("0.0.3")
	record UpdateContactFailed {
		array<com.x.ocl.Email> listOfContacts;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/contact/delete")
	@version("0.0.1")
	record DeleteContact {
		array<string> listOfContactIds;
	}
	
	@topic("/emailMarketing/contact/deleted")
	@version("0.0.2")
	@event("true")
	record ContactDeleted {
		array<string> listOfContactIds;
	}
	
	@topic("/emailMarketing/contact/deleteFailed")
	@version("0.0.1")
	record DeleteContactFailed {
		array<string> listOfContactIds;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/contact/subscribe")
	@version("0.0.1")
	/** This message is similar to SubscribeToList except that it is for one contact */
	record SubscribeContact {
		string contactId;
		string listId;
	}
	
	@topic("/emailMarketing/contact/subscribed")
	@version("0.0.2")
	@event("true")
	record ContactSubscribed {
		string contactId;
		string listId;
	}
	
	@topic("/emailMarketing/contact/subscribeFailed")
	@version("0.0.1")
	record SubscribeContactFailed {
		string contactId;
		string listId;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/contact/unsubscribed")
	@version("0.0.2")
	@event("true")
	record ContactUnsubscribed {
		string contactId;
		string listId;
	}
	
	@topic("/emailMarketing/contact/statistic/get")
	@version("0.0.1")
	record GetContactStatistic {
		string contactId;
		string campaignId;
	}
	
	@topic("/emailMarketing/contact/statistic/getSucceeded")
	@version("0.0.2")
	record GetContactStatisticSucceeded {
		ContactStatistic statistic;
	}
	
	@topic("/emailMarketing/contact/statistic/getFailed")
	@version("0.0.1")
	record GetContactStatisticFailed {
		string contactId;
		array<com.x.ocl.Error> errors;
	}

	@topic("/emailMarketing/list/create")
	@version("0.0.3")
	record CreateList {
		List list;
		
		//Add the following new contacts to this new list
		array<com.x.ocl.Email> newContacts;
		
		//Add any existing contact to this new list
		array<string> existingContacts;
	}
	
	@topic("/emailMarketing/list/created")
	@version("0.0.2")
	@event("true")
	record ListCreated {
		List list;
	}
	
	@topic("/emailMarketing/list/createFailed")
	@version("0.0.2")
	record CreateListFailed {
		List list;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/list/search")
	@version("0.0.1")
	record SearchList {
		ListSearchFilter filter;
	}
	
	@topic("/emailMarketing/list/searchSucceeded")
	@version("0.0.2")
	record SearchListSucceeded {
		ListSearchFilter filter;
		
		//Returns an array of List or Segment
		array<union{List,Segment}> lists;
	}
	
	@topic("/emailMarketing/list/searchFailed")
	@version("0.0.1")
	record SearchListFailed {
		ListSearchFilter filter;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/list/update")
	@version("0.0.2")
	record UpdateList {
		List list;
	}
	
	@topic("/emailMarketing/list/updated")
	@version("0.0.2")
	@event("true")
	record ListUpdated {
		List list;
	}
	
	@topic("/emailMarketing/list/updateFailed")
	@version("0.0.2")
	record UpdateListFailed {
		List list;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/list/delete")
	@version("0.0.1")
	record DeleteList {
	
		/** Can either be a static list id or segment id */
		string listId;
	}
	
	@topic("/emailMarketing/list/deleted")
	@version("0.0.2")
	@event("true")
	record ListDeleted {
		string listId;
	}
	
	@topic("/emailMarketing/list/deleteFailed")
	@version("0.0.1")
	record DeleteListFailed {
		string listId;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/list/subscribe")
	@version("0.0.1")
	record SubscribeList {
		array<string> contactIds;
		
		/** Static list id only. */
		string listId;
	}
	
	@topic("/emailMarketing/list/subscribed")
	@version("0.0.2")
	@event("true")
	record ListSubscribed {
		array<string> contactIds;
		string listId;
	}
	
	@topic("/emailMarketing/list/subscribeFailed")
	@version("0.0.1")
	record SubscribeListFailed {
		array<string> contactIds;
		string listId;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/list/unsubscribe")
	@version("0.0.1")
	record UnsubscribeList {
		array<string> contactIds;
		string listId;
	}
	
	@topic("/emailMarketing/list/unsubscribed")
	@version("0.0.2")
	@event("true")
	record ListUnsubscribed {
		array<string> contactIds;
		string listId;
	}
	
	@topic("/emailMarketing/list/UnsubscribeFailed")
	@version("0.0.1")
	record UnsubscribeListFailed {
		array<string> contactIds;
		string listId;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/message/create")
	@version("0.0.1")
	record CreateMessage {
		Message message;
	}
	
	@topic("/emailMarketing/message/created")
	@version("0.0.2")
	@event("true")
	record MessageCreated {
		Message message;
	}
	
	@topic("/emailMarketing/message/createFailed")
	@version("0.0.1")
	record CreateMessageFailed {
		Message message;
		array<com.x.ocl.Error> errors;
	}

	@topic("/emailMarketing/message/search")
	@version("0.0.1")
	record SearchMessage {
		MessageSearchFilter filter;
	}

	@topic("/emailMarketing/message/searchSucceeded")
	@version("0.0.1")
	record SearchMessageSucceeded {
		MessageSearchFilter filter;
		array<Message> message;
	}
	
	@topic("/emailMarketing/message/searchFailed")
	@version("0.0.1")
	record SearchMessageFailed {
		MessageSearchFilter filter;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/message/update")
	@version("0.0.1")
	record UpdateMessage {
		Message message;
	}
	
	@topic("/emailMarketing/message/updated")
	@version("0.0.2")
	@event("true")
	record MessageUpdated {
		Message message;
	}
	
	@topic("/emailMarketing/message/updateFailed")
	@version("0.0.1")
	record UpdateMessageFailed {
		Message message;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/message/delete")
	@version("0.0.1")
	record DeleteMessage {
		string messageId;
	}
	
	@topic("/emailMarketing/message/deleted")
	@version("0.0.2")
	@event("true")
	record MessageDeleted {
		string messageId;
	}
	
	@topic("/emailMarketing/message/deleteFailed")
	@version("0.0.1")
	record DeleteMessageFailed {
		string messageId;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/create")
	@version("0.0.1")
	record CreateCampaign {
		com.x.ocl.Campaign campaign;
	}
	
	@topic("/emailMarketing/campaign/created")
	@version("0.0.2")
	@event("true")
	record CampaignCreated {
		com.x.ocl.Campaign campaign;
	}
	
	@topic("/emailMarketing/campaign/createFailed")
	@version("0.0.1")
	record CreateCampaignFailed {
		com.x.ocl.Campaign campaign;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/search")
	@version("0.0.1")
	record SearchCampaign {
		CampaignSearchFilter filter;
	}
	
	@topic("/emailMarketing/campaign/searchSucceeded")
	@version("0.0.1")
	record SearchCampaignSucceeded {
		CampaignSearchFilter filter;
		array<com.x.ocl.Campaign> campaigns;
	}
	
	@topic("/emailMarketing/campaign/searchFailed")
	@version("0.0.1")
	record SearchCampaignFailed {
		CampaignSearchFilter filter;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/update")
	@version("0.0.1")
	record UpdateCampaign {
		com.x.ocl.Campaign campaign;
	}
	
	@topic("/emailMarketing/campaign/updated")
	@version("0.0.2")
	@event("true")
	record CampaignUpdated {
		com.x.ocl.Campaign campaign;
	}
	
	@topic("/emailMarketing/campaign/updateFailed")
	@version("0.0.1")
	record UpdateCampaignFailed {
		com.x.ocl.Campaign campaign;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/delete")
	@version("0.0.1")
	record DeleteCampaign {
		string campaignId;
	}
	
	@topic("/emailMarketing/campaign/deleted")
	@version("0.0.2")
	@event("true")
	record CampaignDeleted {
		string campaignId;
	}
	
	@topic("/emailMarketing/campaign/deleteFailed")
	@version("0.0.1")
	record DeleteCampaignFailed {
		string campaignId;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/list/add")
	@version("0.0.1")
	record AddCampaignList {
		string campaignId;
		
		/** Can be id of static list or segment */
		array<string> listIds;
	}
	
	@topic("/emailMarketing/campaign/list/added")
	@version("0.0.2")
	@event("true")
	record CampaignListAdded {
		string campaignId;
		array<string> listIds;
	}
	
	@topic("/emailMarketing/campaign/list/addFailed")
	@version("0.0.1")
	record AddCampaignListFailed {
		string campaignId;
		array<string> listIds;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/schedule")
	@version("0.0.1")
	record ScheduleCampaign {
		string campaignId;
		
		/** When should this campaign execute. A unix timestamp */
		long beginTime;
	}
	
	@topic("/emailMarketing/campaign/scheduled")
	@version("0.0.2")
	@event("true")
	record CampaignScheduled {
		string campaignId;
		long beginTime;
	}
	
	@topic("/emailMarketing/campaign/scheduleFailed")
	@version("0.0.1")
	record ScheduleCampaignFailed {
		string campaignId;
		long beginTime;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/unschedule")
	@version("0.0.1")
	record UnscheduleCampaign {
		string campaignId;
	}
	
	@topic("/emailMarketing/campaign/unscheduled")
	@version("0.0.2")
	@event("true")
	record CampaignUnscheduled {
		string campaignId;
	}
	
	@topic("/emailMarketing/campaign/unscheduleFailed")
	@version("0.0.1")
	record UnscheduleCampaignFailed {
		string campaignId;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/statistic/get")
	@version("0.0.1")
	record GetCampaignStatistic {
		string campaignId;
	}
	
	@topic("/emailMarketing/campaign/statistic/getSucceeded")
	@version("0.0.2")
	record GetCampaignStatisticSucceeded {
		string campaignId;
		CampaignStatistic statistic;
	}
	
	@topic("/emailMarketing/campaign/statistic/getFailed")
	@version("0.0.1")
	record GetCampaignStatisticFailed {
		string campaignId;
		array<com.x.ocl.Error> errors;
	}
	
	@topic("/emailMarketing/campaign/started")
	@version("0.0.2")
	@event("true")
	record CampaignStarted {
		string campaignId;
	}
	
	@topic("/emailMarketing/campaign/completed")
	@version("0.0.2")
	@event("true")
	record CampaignCompleted {
		string campaignId;
	}
}